---
# GitLab Workflow for building and deploying a Hugo site to GitHub Pages
# needs $MRX_DOCKER_USR - the account username for docker hub
# needs $MRX_DOCKER_PWD - the account password for docker hub
# needs $MRX_DOCKER_NS - the account namespace for docker hub e.g. metarexmedia
variables:
  IMAGE: mrx-demo-svc
  vGOLANG: 1.22
  vHUGO: 0.128.1
  # node version `node` will install the latest version with nvm
  vNODE: node
  vDOCKER_IMAGE: 26.0
  REGISTRY: hub.docker.com
  GIT_DEPTH: 0
  GIT_STRATEGY: clone
  GIT_SUBMODULE_STRATEGY: recursive
  TZ: Europe/London
  barkId: "GitLab:"
  # docker will fail to login unless the certdir is specified
  DOCKER_TLS_CERTDIR: "/certs"

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH =="main"
      when: never
    - if: $CI_COMMIT_BRANCH =="rc"

stages:
  - build
  - deploy
  # - hook

default:
  image: golang:latest

# --- bark --------------------------------------------------------------------
# --- bark --------------------------------------------------------------------
bark:
  stage: build
  artifacts:
    paths:
      - ./tmp/*
    expire_in: 1 week  
  script:
    - g1="GITLAB_USER_ID                       CI_COMMIT_BRANCH             GITLAB_USER_LOGIN        MRX_DOCKER_USR   REGISTRY           CI_REGISTRY         GITLAB_USER_EMAIL   GITLAB_USER_NAME"
    - g2="CI_COMMIT_TAG                        CI_COMMIT_DESCRIPTION        CI_BUILDS_DIR            CI_PROJECT_DIR   CI_PROJECT_PATH    CI_PIPELINE_SOURCE  CI_MERGE_REQUEST_ID CI_PROJECT_PATH"
    - g3="CI_MERGE_REQUEST_SOURCE_BRANCH_NAME  CI_MERGE_REQUEST_REF_PATH    CI_MERGE_REQUEST_LABELS  CI_MERGE_REQUEST_APPROVED"
    - g4="CI_RUNNER_VERSION                    CI_SERVER  CI_PIPELINE_NAME  CI_JOB_STAGE             CI_JOB_TOKEN     CI_MERGE_REQUEST_APPROVED  KUBECONFIG"
    - gg=(g1 g2 g3 g4)
    # print each group with a line separator
    - for g in "${gg[@]}"; do echo " "; for n in ${!g}; do printf "%s %36s = %s\n" $barkId "\$$n" "${!n}"; done; done
    # install clog
    - curl https://mrmxf.com/get/clogdev | bash
    - clog build

# --- deploy ------------------------------------------------------------------
deploy:
  stage: deploy
  script:
    # create env from upstream dependencies
    - curl https://mrmxf.com/get/clogdev | bash 
    - clog deploy

