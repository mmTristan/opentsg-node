//This simple package manages the version number and name.
//
// Four values are exported
//  {string}  `String`  This is the current version string of the build
//  {string}  `Name`    This is the current version code-name of the build
//                      alphabetical order from www.tate.org.uk/art/art-terms
//  {string}  `Build`   This is the current version number of the build
//  {string}  `Date`    This is the that the build was created (alphabetical art stuff)
//
// The init() function ensures that the `Build` and `Date` values are only set

package versionstr

const vString = "0.2.2."
const Name = "art-brut"

var devBuild string = "dev"
var devDate string = "development"

// verion.Build and version.Date are auto-generated by the build script

// The build script links using a variable main.useLinkerOverrides
// that is only exists when the build script is used
//
// typical build script
// ```sh
// GOCODE=$(cat <<-EOM
// 	package versionstr  //auto-generated (versionstr.go)
// 	const build = "$(git rev-list -1 HEAD)"
// 	const date = "$(date +%F)"
// 	EOM
// 	)
// 	echo "$GOCODE" > versionstr/versionstr-build-id.go
// 	echo "Building clog with metadata"
// 	go build -ldflags "-X main.UseLinkerOverrides=true"
// ```

// typical usage:
// ```
//  package main
//
//  // define a string in the main packages
//  var useLinkerOverrides string
//
//  //in your func get the version....
//  version:= versionstr.Long()
//
// ```

func Short(useLinkerOverrides bool) string {
	if useLinkerOverrides {
		return vString + build[36:]
	} else {
		return vString + devBuild
	}
}
func Long(useLinkerOverrides bool) string {
	if useLinkerOverrides {
		return Short(useLinkerOverrides) + "  built " + date
	} else {
		return Short(useLinkerOverrides) + "  built " + devDate
	}
}
